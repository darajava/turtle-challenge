{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","orientations","state","player","JSON","parse","stringify","map","startPos","moves","movesWin","gameState","initialiseInterval","_this2","clearTimeout","interval","setInterval","moveTurtle","movesType","movesLose","movesUnfinished","setState","length","orientation","y","x","indexOf","isMine","clearInterval","isExit","shift","i","mines","exitPos","gridChildren","size","child","push","react_default","a","createElement","src","isPlayerPos","className","key","overlay","_this3","generateGrid","onClick","reset","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ae7e62a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport map from './data/map_0.json';\n\nimport movesLose from './data/moves_0.json';\nimport movesWin from './data/moves_1.json';\nimport movesUnfinished from './data/moves_2.json';\n\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n  \n    this.orientations = [\"n\", \"e\", \"s\", \"w\"];\n\n    // We need to clone the starting position here and below via JSON so that\n    // we do not modify the initial state\n    this.state = {\n      player: JSON.parse(JSON.stringify(map.startPos)),\n      moves: JSON.parse(JSON.stringify(movesWin)),\n      gameState: \"inProgress\",\n    }\n\n    this.initialiseInterval();\n  }\n\n  initialiseInterval() {\n    clearTimeout(this.interval);\n\n    // Move the turtle every X milliseconds according to this interval,\n    // and save the interval to clear later\n    this.interval = setInterval(() => {\n      this.moveTurtle();\n    }, 1000);\n  }\n\n  reset(movesType) {\n    let moves;\n\n    if (movesType === \"win\") {\n      moves = movesWin;\n    } else if (movesType === \"lose\") {\n      moves = movesLose;\n    } else {\n      moves = movesUnfinished;\n    }\n\n    this.initialiseInterval();\n\n    this.setState({\n      player: JSON.parse(JSON.stringify(map.startPos)),\n      moves: JSON.parse(JSON.stringify(moves)),\n      gameState: \"inProgress\",\n    })\n  }\n\n  moveTurtle() {\n    // if we have run out of moves, then we lose\n    if (!this.state.moves.length) {\n      this.setState({\n        gameState: \"incomplete\",\n      });\n\n      return;\n    }\n\n    const player = this.state.player;\n\n    // Working from the first move always, we will remove this element later\n    const moves = this.state.moves;\n\n    if (moves[0] === \"m\") {\n      // Move the turtle based on his orientation\n      switch (player.orientation) {\n        case \"n\":\n          player.y = player.y - 1;\n\n          break;\n        case \"e\":\n          player.x = player.x + 1;\n\n          break;\n        case \"s\":\n          player.y = player.y + 1;\n\n          break;\n        case \"w\":\n          player.x = player.x - 1;\n\n          break;\n      }\n    } else if (moves[0] === \"r\") {\n      // Find orientation and assign next one in the list, wrapping around if needed\n      // This gets the current index of the current orientation of the turtle, adds 1, and\n      // mods it by the length of the orientation in case it goes off the end of the array.  \n      player.orientation = this.orientations[\n        (this.orientations.indexOf(player.orientation) + 1) % this.orientations.length\n      ];\n    }\n\n    // Use the new position to check if we're on a mine, or at an exit.\n    // If we are, then update the game state\n    if (this.isMine(player.x, player.y)) {\n      this.setState({\n        gameState: \"dead\", // :( \n      });\n\n      clearInterval(this.interval);\n    } else if (this.isExit(player.x, player.y)) {\n      this.setState({\n        gameState: \"win\", // :)\n      });\n\n      clearInterval(this.interval);\n    }\n    // TODO: Maybe an out of bounds check?\n\n    // We're done with this move, so remove it from the start of the array for next time\n    // this function is called.\n    moves.shift();\n\n    this.setState({\n      player,\n      moves,\n    })\n  }\n\n\n  isMine(x, y) {\n    for (let i = 0; i < map.mines.length; i++) {\n      if (map.mines[i].x === x && map.mines[i].y === y) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n\n  isExit(x, y) {\n    return map.exitPos.x === x && map.exitPos.y === y;\n  }\n\n\n  isPlayerPos(x, y) {\n    return this.state.player.x === x && this.state.player.y === y\n  }\n\n\n  generateGrid() {\n    const gridChildren = [];\n\n    for (let y = 0; y < map.size.y; y++) {\n      for (let x = 0; x < map.size.x; x++) {\n        let child = [];\n        // These give a React warning, but I suspect this is a bug in React.\n        // I will file a bug report for this.\n        if (this.isMine(x, y)) {\n          child.push(<img src=\"mine.jpg\"/>);\n        }\n        if (this.isExit(x, y)) {\n          child.push(<img src=\"exit.png\"/>);\n        }\n        if (this.isPlayerPos(x, y)) {\n          child.push(<img className={this.state.player.orientation} src=\"turtle.png\"/>);\n        }\n\n\n        gridChildren.push(<span key={x + \",\" + y} className=\"grid-item\">{child}</span>);\n      }\n      gridChildren.push(<div key={\"break\" + y}/>)\n    }\n\n    return gridChildren;\n  }\n\n  render() {\n    const gridChildren = this.generateGrid();\n\n    let overlay;\n    switch (this.state.gameState) {\n      case \"dead\":\n        overlay = <div className=\"overlay dead\">ded :,(</div>;\n        break;\n      case \"win\":\n        overlay = <div className=\"overlay win\">winrar :)))</div>;\n        break;\n      case \"incomplete\":\n        overlay = <div className=\"overlay dead\">Out of juice :,(</div>;\n        break; \n    }\n\n    return (\n      <div>\n        <div className=\"table-holder\">\n          {gridChildren}\n          {overlay}\n        </div>\n\n        <button onClick={() => this.reset(\"win\")}>Win</button>\n        <button onClick={() => this.reset(\"lose\")}>Lose</button>\n        <button onClick={() => this.reset(\"unfinished\")}>Don't finish</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}